version: '3.9'

# see .env file for the default value of the environment variables
services:
  elasticsearch:
    container_name: elasticsearch
    environment:
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=512mb
      - cluster.routing.allocation.disk.watermark.high=256mb
      - cluster.routing.allocation.disk.watermark.flood_stage=128mb
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
      - xpack.security.enabled=false
    image: elasticsearch:${ELASTICSEARCH_VERSION}
    networks:
      - testing-network
    expose:
      - 9200
  postgresql:
    container_name: temporal-postgresql
    environment:
      POSTGRES_PASSWORD: temporal
      POSTGRES_USER: temporal
    image: postgres:${POSTGRESQL_VERSION}
    networks:
      - testing-network
    expose:
      - 5432
  temporal:
    container_name: temporal
    depends_on:
      - postgresql
      - elasticsearch
    environment:
      - DB=postgres12
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
      - ENABLE_ES=true
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
    image: temporalio/auto-setup:${TEMPORAL_VERSION}
    networks:
      - testing-network
    ports:
      - 7233:7233
    labels:
      kompose.volume.type: configMap
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
  temporal-admin-tools:
    container_name: temporal-admin-tools
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    image: temporalio/admin-tools:${TEMPORAL_ADMIN_TOOLS_VERSION}
    networks:
      - testing-network
    stdin_open: true
    tty: true
    volumes:
      - ./init-ci-temporal.sh:/etc/temporal/init-ci-temporal.sh
    entrypoint: sh -c "/etc/temporal/init-ci-temporal.sh"
  cassandra:
    image: cassandra:${CASSANDRA_VERSION}
    ports:
      - "9042:9042"
    healthcheck:
      test: [ "CMD", "cqlsh", "-u cassandra", "-p cassandra" ,"-e describe keyspaces" ]
      interval: 15s
      timeout: 30s
      retries: 10
    networks:
      - testing-network
  kafka:
    image: docker.io/bitnami/kafka:3.8
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      # KRaft settings
      - "KAFKA_CFG_NODE_ID=0"
      - "KAFKA_CFG_PROCESS_ROLES=controller,broker"
      - "KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093"
      # Listeners
      - "KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093"
      - "KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092"
      - "KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      - "KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER"
      - "KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT"
      # Topic settings
      - "KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true"
    networks:
      - testing-network
    healthcheck:
      test:
        [ "CMD", "kafka-topics.sh", "--list", '--bootstrap-server', 'kafka:9092']
      interval: 1s
      timeout: 60s
      retries: 60
  cadence:
    image: ubercadence/server:v1.2.16-auto-setup
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
      - "8003:8003"
      - "7933:7933"
      - "7934:7934"
      - "7935:7935"
      - "7939:7939"
      - "7833:7833"
      - "7936:7936"
    environment:
      - "CASSANDRA_SEEDS=cassandra"
      - "DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development_es.yaml"
      - "ENABLE_ES=true"
      - "ES_SEEDS=elasticsearch"
      - "ES_VERSION=v7"
      - "KAFKA_SEEDS=kafka"
    depends_on:
      cassandra:
        condition: service_healthy
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    networks:
      - testing-network
  cadence-admin-tools:
    container_name: cadence-admin-tools
    depends_on:
      - cadence
    environment:
      - CADENCE_CLI_ADDRESS=cadence:7933
    image: ubercadence/cli:v1.2.16
    networks:
      - testing-network
    stdin_open: true
    tty: true
    volumes:
      - ./init-ci-cadence.sh:/etc/cadence/init-ci-cadence.sh
    entrypoint: sh -c "/etc/cadence/init-ci-cadence.sh"
  cadence-web:
    image: ubercadence/web:v4.0.0
    environment:
      - "CADENCE_TCHANNEL_PEERS=cadence:7933"
      - "CADENCE_GRPC_PEERS=cadence:7833"
    ports:
      - "8088:8088"
    depends_on:
      - cadence
    networks:
      - testing-network
  temporal-ui:
    container_name: temporal-ui-iwf
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    image: temporalio/ui:${TEMPORAL_UI_VERSION}
    networks:
      - testing-network
    ports:
      - 8233:8080
  minio:
    container_name: minio
    image: minio/minio:${MINIO_VERSION:-latest}
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_DOMAIN=minio
    command: server /data --console-address ":9001"
    networks:
      - testing-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
networks:
  testing-network:
    driver: bridge
    name: testing-network
volumes:
  minio-data: